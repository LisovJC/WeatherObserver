// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using WeatherObserver.Data;

#nullable disable

namespace WeatherObserver.Migrations
{
    [DbContext(typeof(WeatherObserverDbContext))]
    partial class WeatherObserverDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("WeatherObserver.Models.WeatherExcelInfo", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Month")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("weather");
                });

            modelBuilder.Entity("WeatherObserver.Models.WeatherModel", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("AtmosphericPressure")
                        .HasColumnType("float");

                    b.Property<double>("CloudCover")
                        .HasColumnType("float");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<double>("DewPoint")
                        .HasColumnType("float");

                    b.Property<double>("HorizontalVisibility")
                        .HasColumnType("float");

                    b.Property<double>("LowerСloudLimit")
                        .HasColumnType("float");

                    b.Property<double>("RelativeHumidity")
                        .HasColumnType("float");

                    b.Property<double>("Temperature")
                        .HasColumnType("float");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.Property<Guid?>("WeatherExcelInfoId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("WeatherPhenomena")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WindDirection")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("WindSpeed")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("WeatherExcelInfoId");

                    b.ToTable("WeatherModel");
                });

            modelBuilder.Entity("WeatherObserver.Models.WeatherModel", b =>
                {
                    b.HasOne("WeatherObserver.Models.WeatherExcelInfo", null)
                        .WithMany("WeatherDatas")
                        .HasForeignKey("WeatherExcelInfoId");
                });

            modelBuilder.Entity("WeatherObserver.Models.WeatherExcelInfo", b =>
                {
                    b.Navigation("WeatherDatas");
                });
#pragma warning restore 612, 618
        }
    }
}
